import random
import numpy as np
from canary_sefi.core.function.enum.multi_db_mode_enum import MultiDatabaseMode
from canary_sefi.core.function.helper.multi_db import use_multi_database
from canary_sefi.core.function.helper.recovery import global_recovery
from canary_sefi.service.security_evaluation import SecurityEvaluation
from canary_sefi.task_manager import task_manager

# Load Canary Lib into SEFI Component Manager
# If the user defines their own components (including attack methods, models, or dataset loaders),
# they need to be loaded into the SEFI Component Manager to be effective
from canary_sefi.core.component.component_manager import SEFI_component_manager
from canary_lib import canary_lib  # Canary Lib
SEFI_component_manager.add_all(canary_lib)

# In freedom mode, you should write your own config to drive the test to run normally.
# We do not recommend this method unless you are sure that you have an accurate understanding of all the config.
# Please read the documentation carefully when writing the configuration.
if __name__ == "__main__":
    example_config = {
        # The following configurations are used to configure the dataset.
        "dataset_size": 10,  # Number of images used for testing.
        "dataset": {
            "dataset_name": "CIFAR10",
            "dataset_folder": "CIFAR-10",
            "dataset_type": "TEST",
            "n_classes": 10,
            "is_gray": False,
        },  # Dataset used for testing.
        "dataset_seed": random.Random().randint(10000, 100000),  # Randomly select seeds from images.

        # The following configurations are used to configure the models.
        # If you want to use your own model, please read the documentation to integrate the model into SEFI.
        "model_list": [
            "ResNet(CIFAR-10)"  # The model implementation (weight) needs to be consistent with the dataset, otherwise errors will occur during evaluation
        ],
        "model_config":{  # Model create parameters.
            "ResNet(CIFAR-10)": {}
        },
        "img_proc_config": {  # Image preprocessing parameters.
            "ResNet(CIFAR-10)": {}
        },
        "inference_batch_config": {  # Number of batch inference for images(including original and generated Adv images)
            "ResNet(CIFAR-10)": 5,
        },

        # The following configurations are used to configure the attacker.
        # If you want to use your own attack method, please read the documentation to integrate the method into SEFI.
        "attacker_list": {
            "I_FGSM": [  # Attack Methods in SEFI Lib.
                "ResNet(CIFAR-10)",  # The target model of this attack method.
            ],
        },
        "attacker_config": {  # Attack parameters.
            # We suggest that you read papers on relevant methods to determine specific parameters.
            "I_FGSM": {  # I_FGSM attack's necessary parameters, related to the attack model, attack intensity, etc.
                "clip_min": 0,
                "clip_max": 1,
                "eps_iter": 2.5 * ((1 / 255) / 100),
                "nb_iter": 100,
                "norm": np.inf,
                "attack_type": "UNTARGETED",
                "epsilon": 1 / 255,
            }
        },
        "adv_example_generate_batch_config": {  # Number of batch generated for Adv example images.
            "I_FGSM": {
                "ResNet(CIFAR-10)": 5,
            }
        },
        # Transfer attack testing mode:
        # NOT: no transfer testing is conducted,
        #      meaning that the adversarial samples generated by an attack on Model A will only be tested on Model A.
        # Please read the documentation for the usage of other options.
        "transfer_attack_test_mode": "NOT"
    }

    # Initialize the task,
    # which will create a new folder for storing images and generate a new SQLite database for the task
    task_manager.init_task(show_logo=True, run_device="cuda")

    # If your task is accidentally interrupted,
    # whether it is a proactive termination or an unexpected error, it can be recovered through recovery mode
    # You need to fill in the token of the task to the "task_token"

    # There can only be one task initialization and recovery, otherwise an error will occur
    # (therefore, we have annotated the recovery mode code to avoid errors)
    # ------------------
    # global_recovery.start_recovery_mode(task_token="", show_logo=True, run_device="cuda")
    # ------------------

    # Set the current mode to a simple database.
    # Please read the document about multiple databases.
    use_multi_database(mode=MultiDatabaseMode.SIMPLE)

    # Build security testing and execute.
    security_evaluation = SecurityEvaluation(example_config)
    security_evaluation.attack_full_test()
